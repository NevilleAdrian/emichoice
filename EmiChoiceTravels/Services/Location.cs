using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = HashTag.FromJson(jsonString);

namespace QuickType
{
    public partial class HashTag
    {
        [JsonProperty("locations")]
        public LocationElement[] Locations { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class LocationElement
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("int_id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? IntId { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("alternative_names")]
        public string[] AlternativeNames { get; set; }

        [JsonProperty("rank")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long Rank { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public City City { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public LocationLocation Location { get; set; }

        [JsonProperty("alternative_departure_points", NullValueHandling = NullValueHandling.Ignore)]
        public AlternativeDeparturePoints AlternativeDeparturePoints { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("population", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Population { get; set; }

        [JsonProperty("airports", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Airports { get; set; }

        [JsonProperty("stations", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Stations { get; set; }

        [JsonProperty("subdivision", NullValueHandling = NullValueHandling.Ignore)]
        public string Subdivision { get; set; }

        [JsonProperty("autonomous_territory", NullValueHandling = NullValueHandling.Ignore)]
        public string AutonomousTerritory { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public Continent Country { get; set; }

        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public Continent Region { get; set; }

        [JsonProperty("continent", NullValueHandling = NullValueHandling.Ignore)]
        public Continent Continent { get; set; }

        [JsonProperty("neighbours", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Neighbours { get; set; }

        [JsonProperty("organizations", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Organizations { get; set; }
    }

    public partial class AlternativeDeparturePoints
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("distance")]
        public double Distance { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }
    }

    public partial class City
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("subdivision")]
        public string Subdivision { get; set; }

        [JsonProperty("autonomous_territory")]
        public string AutonomousTerritory { get; set; }

        [JsonProperty("country")]
        public Continent Country { get; set; }

        [JsonProperty("region")]
        public Continent Region { get; set; }

        [JsonProperty("continent")]
        public Continent Continent { get; set; }
    }

    public partial class Continent
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }
    }

    public partial class LocationLocation
    {
        [JsonProperty("lon")]
        public Lat Lon { get; set; }

        [JsonProperty("lat")]
        public Lat Lat { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("locale")]
        public Locale Locale { get; set; }
    }

    public partial class Locale
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial struct Lat
    {
        public double? Double;
        public string String;

        public static implicit operator Lat(double Double) => new Lat { Double = Double };
        public static implicit operator Lat(string String) => new Lat { String = String };
    }

    public partial class HashTag
    {
        public static HashTag FromJson(string json) => JsonConvert.DeserializeObject<HashTag>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HashTag self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LatConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (Int64.TryParse(value, out long l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class LatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lat) || t == typeof(Lat?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Lat { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Lat { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Lat");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Lat)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Lat");
        }

        public static readonly LatConverter Singleton = new LatConverter();
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return integerValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return l;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }
}
