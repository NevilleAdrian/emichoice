using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace EmiChoiceTravels.DTOs
{

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using EmiChoiceTravels.DTOs;
    //
    //    var welcome = HashTag.FromJson(jsonString);
    public partial class HashTag
    {
        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("hashtags")]
        public string[] Hashtags { get; set; }

        [JsonProperty("last_refresh")]
        public long LastRefresh { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("locale")]
        public Locale Locale { get; set; }
    }

    public partial class Locale
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class HashTag
    {
        public static HashTag FromJson(string json) => JsonConvert.DeserializeObject<HashTag>(json, Converter.Settings);
    }

    public static class SerializeHasTag
    {
        public static string ToJson(this HashTag self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
